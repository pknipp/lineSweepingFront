[{"/Users/pknipp/Desktop/repos/line_sweeping/front/src/index.js":"1","/Users/pknipp/Desktop/repos/line_sweeping/front/src/App.js":"2","/Users/pknipp/Desktop/repos/line_sweeping/front/src/lookup.js":"3","/Users/pknipp/Desktop/repos/line_sweeping/front/src/setTowns.js":"4","/Users/pknipp/Desktop/repos/line_sweeping/front/src/tsp.js":"5","/Users/pknipp/Desktop/repos/line_sweeping/front/src/setLines.js":"6"},{"size":506,"mtime":1611765216984,"results":"7","hashOfConfig":"8"},{"size":2512,"mtime":1634688756455,"results":"9","hashOfConfig":"8"},{"size":432,"mtime":1634352515724,"results":"10","hashOfConfig":"8"},{"size":505,"mtime":1634352515725,"results":"11","hashOfConfig":"8"},{"size":923,"mtime":1634246850244,"results":"12","hashOfConfig":"13"},{"size":1284,"mtime":1634688657186,"results":"14","hashOfConfig":"8"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"99ycft",{"filePath":"18","messages":"19","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"zk5t0k",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/pknipp/Desktop/repos/line_sweeping/front/src/index.js",[],["30","31"],"/Users/pknipp/Desktop/repos/line_sweeping/front/src/App.js",["32","33","34"],"import React, {useState, useEffect} from 'react';\n\n// import setTowns from './setTowns';\n// import lookup from './lookup';\nimport setLines from './setLines';\n\nconst App = () => {\n    // Python chokes on Infinity, so ...\n    const INFINITY = 10 ** 10;\n    const origin = [0, 36];\n    const {lines, distances} = setLines(origin);\n    const n = lines.length;\n    const base2Max = 2 ** n;\n    const fac = new Array(n).fill(0).reduce((fac, ignoreMe, i) => fac * (i + 1), 1);\n\n    const [iter, setIter] = useState(0);\n    const [distanceMin, setDistanceMin] = useState(INFINITY);\n    const [memo, setMemo] = useState([]);\n    const [finished, setFinished] = useState(false);\n    const [results, setResults] = useState([[iter, distanceMin]]);\n    const [data, setData] = useState({});\n    const [progress, setProgress] = useState(0);\n    const [base2, setBase2] = useState(0);\n\n    useEffect(() => {\n        if (!finished) {\n            (async () => {\n                let [newIter, newBase2] = [iter, base2];\n                if (distanceMin < INFINITY && base2 && !(base2 % base2Max)) {\n                    newBase2 = 0;\n                    newIter++;\n                }\n                let params = JSON.stringify({n, fac, base2Max, iter: newIter, base2: newBase2, distanceMin, memo, lines, origin, distances});\n                let backURL = `http://127.0.0.1:5000/${params}`;\n                // let backURL = `https://line-sweeping-back.herokuapp.com/${params}`;\n                setData(await(await fetch(backURL)).json());\n            })()\n        }\n    }, [iter]);\n\n    useEffect(() => {\n        if (Object.keys(data).length > 1) {\n            setIter(data.iter);\n            setProgress(Math.round(100 * (data.iter + 1) / fac ));\n            if (data.distance_min) {\n                setDistanceMin(data.distance_min);\n                setMemo(data.memo);\n                let result = [data.iter, data.distance_min];\n                // console.log(result)\n                setResults(data.iter ? [...results, result] : [result]);\n            }\n        };\n        if (data.finished) {\n            setFinished(true);\n            setProgress(100);\n        };\n    }, [data]);\n\n    return (\n        <>\n            <div>Progress: {finished ? 'FINISHED!' : `${progress}%`}</div>\n            <ul>\n                {results.map(result => (\n                    <li key={result[0]}>\n                        {result.join(\" \")}\n                    </li>\n                ))}\n            </ul>\n        </>\n    )\n}\nexport default App;\n","/Users/pknipp/Desktop/repos/line_sweeping/front/src/lookup.js",[],["35","36"],"/Users/pknipp/Desktop/repos/line_sweeping/front/src/setTowns.js",[],"/Users/pknipp/Desktop/repos/line_sweeping/front/src/tsp.js",["37"],"/Users/pknipp/Desktop/repos/line_sweeping/front/src/setLines.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":23,"column":19,"nodeType":"44","messageId":"45","endLine":23,"endColumn":27},{"ruleId":"46","severity":1,"message":"47","line":39,"column":8,"nodeType":"48","endLine":39,"endColumn":14,"suggestions":"49"},{"ruleId":"46","severity":1,"message":"50","line":57,"column":8,"nodeType":"48","endLine":57,"endColumn":14,"suggestions":"51"},{"ruleId":"38","replacedBy":"52"},{"ruleId":"40","replacedBy":"53"},{"ruleId":"54","severity":2,"message":"55","line":18,"column":21,"nodeType":"44","messageId":"56","endLine":18,"endColumn":28},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'setBase2' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'INFINITY', 'base2', 'base2Max', 'distanceMin', 'distances', 'fac', 'finished', 'lines', 'memo', 'n', and 'origin'. Either include them or remove the dependency array.","ArrayExpression",["59"],"React Hook useEffect has missing dependencies: 'fac' and 'results'. Either include them or remove the dependency array. You can also do a functional update 'setResults(r => ...)' if you only need 'results' in the 'setResults' call.",["60"],["57"],["58"],"no-undef","'findOne' is not defined.","undef","no-global-assign","no-unsafe-negation",{"desc":"61","fix":"62"},{"desc":"63","fix":"64"},"Update the dependencies array to be: [INFINITY, base2, base2Max, distanceMin, distances, fac, finished, iter, lines, memo, n, origin]",{"range":"65","text":"66"},"Update the dependencies array to be: [data, fac, results]",{"range":"67","text":"68"},[1552,1558],"[INFINITY, base2, base2Max, distanceMin, distances, fac, finished, iter, lines, memo, n, origin]",[2157,2163],"[data, fac, results]"]